openapi: 3.0.3
info:
  title: Petsitter API
  version: "0.1"
  description: |-
    This is a set of APIs for the Petsitter Application (which 
    consists of a MongoDB database, a Node.js backend and a 
    React.js frontend).  

    ---

    # Users
    The Users API set allows for the CRUD operations on a user, as well as for the user to create jobs (
    as a pet owner), and list their own jobs.

    # Jobs
    The Jobs API set allows for the CRUD operations for pet sitting jobs

    # Job Applications
    This set of APIs is used for the creation of applications for a job, or to see the applications 
    made against a job.
  
  contact:
    name: Matt H.
    url: https://github.com/hollowmatt/petsitter
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
tags:
  - name: Users
    description: Users of the Petsitter system (can be owner, petsitter, admin)
  - name: Jobs
    description: Jobs created by owners to have their pet looked after.
  - name: Job Applications
    description: Job applications by a pet sitter for a job.
paths:
  /users:
    post:
      tags:
        - Users
      summary: Register a user
      operationId: registerUser
      responses:
        '201':
          description: Creeated
          headers:
            Location:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /users/{id}:
   parameters:
     - schema:
         type: string
       name: id
       in: path
       required: true
   get:
     tags:
      - Users
     summary: View User
     operationId: getUserById
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
   put:
     tags:
      - Users
     summary: Modify User
     operationId: modifyUserById
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
   delete:
     tags:  
      - Users
     summary: Delete User
     operationId: deleteUserById
     responses:
       '204':
         description: No Content
  /users/{id}/jobs:
   parameters:
     - schema:
         type: string
       name: id
       in: path
       required: true
   get:
     tags:
      - Jobs
     summary: List jobs for User
     operationId: getJobsForUser
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Job'
  /users/{id}/job-applicatiions:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Job Applications
      summary: List applications for a given user
      operationId: getApplicationsForUser
      responses:
       '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                two-items:
                  summary: Two job applications
                  value:
                    items:
                    - id: 123
                      user_id: 123
                      job_id: 123
                      status: PENDING
                    - id: 123
                      user_id: 123
                      job_id: 123
                      status: COMPLETE
  /jobs:
    get:
      tags:
        - Jobs
      summary: List all jobs
      operationId: getAllJobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
              examples:
                with-some-data:
                  summary: With some data
                  value:
                    items:
                    - id: 123
                      creator_user_id: 345
                      start_time: 2020-06-01T00:00:00Z
                      end_time: 2020-06-02T00:00:00Z
                      dog:
                        name: Fido
                        age: 3
                        breed: Doberman
                        size: medium
                      activity: walk
                    - id: 234
                      creator_user_id: 345
                      start_time: 2020-06-01T00:00:00Z
                      end_time: 2020-06-03T00:00:00Z
                      dog:
                        name: Rex
                        age: 2
                        breed: Rottweiler
                        size: large
                      activity: sit
                    - id: 234
                      creator_user_id: 345
                      start_time: 2020-06-01T00:00:00Z
                      end_time: 2020-06-02T00:00:00Z
                      dog:
                        name: Blossom
                        age: 2
                        breed: Rottweiler
                        size: large
                      activity: walk
    post:
      tags:
        - Jobs
      summary: Create a job
      operationId: createJob
      responses:
        '201':
          description: created
          headers:
            Location:
              schema: 
                type: string
      requestBody:
        content:  
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
  /jobs/{id}:
   parameters:
     - schema:
         type: string
       name: id
       in: path
       required: true
   get:
     tags:
      - Jobs
     summary: View Job
     operationId: getJobById
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Job'
   delete:
    tags:
      - Jobs
    summary: Delete Job
    operationId: deleteJobById
    responses:
      '204':
        description: No Content
   put:
     tags:
      - Jobs
     summary: Modify Job
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Job'
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Job'
  /jobs/{id}/job-applications:
   parameters:
     - schema:
         type: string
       name: id
       in: path
       required: true
   get:
     tags:
      - Job Applications
     summary: List Applications For Job
     operationId: getApplicationsByJob
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               type: object
               properties:
                 items:
                   type: array
                   items:
                     $ref: '#/components/schemas/JobApplication'
   post:
      tags:
        - Job Applications
      summary: Create Job Application
      operationId: createJobApplication
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobApplication'
  /job-applications/{id}:
   parameters:
     - schema:
         type: string
       name: id
       in: path
       required: true
   put:
     tags:
      - Job Applications
     summary: Modify Job Application
     operationId: modifyJobApplication
     requestBody:
       description: Update the application details
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/JobApplication'

     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/JobApplication'
            
components:
  schemas: 
    User: 
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        full_name:
          type: string
        roles:
          type: array
          items:
            type: string
    Job:
      type: object
      properties:
        id: 
          type: string
        creator_user_id:
          type: string
        start_time:
          type: string
        activity:
          type: string
        Pet:
          $ref: '#/components/schemas/Pet'
    Pet:
      type: object
      properties:
        pet_type:
          type: string
        name: 
          type: string
        age:
          type: integer
        breed:
          type: string
        size:
          type: string
    JobApplication:
      type: object
      properties:
        id: 
          type: string
        status:
          type: string
        user_id:
          type: string
        job_id:
          type: string