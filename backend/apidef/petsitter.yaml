openapi: 3.0.3
info:
  title: Petsitter API
  version: "0.1"
  description: |-
    This is a set of APIs for the Petsitter Application (which 
    consists of a MongoDB database, a Node.js backend and a 
    React.js frontend).  
  
  contact:
    name: Matt H.
    url: https://github.com/hollowmatt/petsitter
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
paths:
  /users:
    post:
      summary: Register a user
      responses:
        '201':
          description: Creeated
          headers:
            Location:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /users/{id}:
   parameters:
     - schema:
         type: integer
       name: id
       in: path
       required: true
   get:
     summary: View User
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
   put:
     summary: Modify User
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
   delete:
     summary: Delete User
     responses:
       '204':
         description: No Content
  /users/{id}/jobs:
   parameters:
     - schema:
         type: integer
       name: id
       in: path
       required: true
   get:
     summary: List jobs for User
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Job'
  /jobs:
    get:
      summary: List all jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
    post:
      summary: Create a job
      responses:
        '201':
          description: created
          headers:
            Location:
              schema: 
                type: string
      requestBody:
        content:  
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
  /jobs/{id}:
   parameters:
     - schema:
         type: integer
       name: id
       in: path
       required: true
   get:
     summary: View Job
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Job'
   put:
     summary: Modify Job
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Job'
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Job'
  /jobs/{id}/job-applications:
   parameters:
     - schema:
         type: integer
       name: id
       in: path
       required: true
   get:
     summary: List Applications For Job
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               type: object
               properties:
                 items:
                   type: array
                   items:
                     $ref: '#/components/schemas/JobApplication'
   post:
      summary: Create Job Application
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobApplication'
  /job-applications/{id}:
   parameters:
     - schema:
         type: integer
       name: id
       in: path
       required: true
   put:
     summary: Modify Job Application
     requestBody:
       description: Update the application details
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/JobApplication'

     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/JobApplication'
            
components:
  schemas: 
    User: 
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        full_name:
          type: string
        roles:
          type: array
          items:
            type: string
    Job:
      type: object
      properties:
        id: 
          type: integer
        creator_user_id:
          type: integer
        start_time:
          type: string
        activity:
          type: string
        Pet:
          $ref: '#/components/schemas/Pet'
    Pet:
      type: object
      properties:
        pet_type:
          type: string
        name: 
          type: string
        age:
          type: integer
        breed:
          type: string
        size:
          type: string
    JobApplication:
      type: object
      properties:
        id: 
          type: integer
        status:
          type: string
        user_id:
          type: integer
        job_id:
          type: integer

 